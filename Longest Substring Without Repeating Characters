Problem Number: 3
Problem Name: Longest Substring Without Repeating Characters
Link: https://leetcode.com/problems/longest-substring-without-repeating-characters/

Question
Given a string s, find the length of the longest substring without repeating characters.

           
            
Solution 


Time Complexity: O((N), where N is the length of the string
Space Complexity: O(N), where N is the length of the string


APPROACH 1
class Solution {
    public int lengthOfLongestSubstring(String s) {
        
        // saves the last occurrence of the character
        HashMap<Character, Integer> map = new HashMap();
        
        int ans = 0;        
        for(int i=0, j=0; i<s.length(); i++) {
            
            char ch = s.charAt(i);
            // if a character has occurred earlier, then set the left pointer to the index which doesn't include the last occurrence of that character
            if (map.containsKey(ch)) {
                int idx = map.get(ch);
                j = Math.max(j, idx+1);
            }
            
            // update the map with the laest occurrence
            map.put(ch, i);
            
            ans = Math.max(ans, i-j+1);
        }
        
        return ans;
    }
}



Time Complexity: O((N), where N is the length of the string
Space Complexity: O(N), where N is the length of the string


APPROACH 2
class Solution {
    public int lengthOfLongestSubstring(String s) {
        
        // saves the frequency of the character
        HashMap<Character, Integer> map = new HashMap();
        
        int ans = 0;        
        int left = 0, right = 0;
        while(right < s.length()) {
        
            char ch = s.charAt(right);
            
            map.put(ch, map.getOrDefault(ch, 0) + 1);
            
            // if the newly added character's frequency is more than once, then remove all characters till the newly added character's fequency becomes one. Narrowing the window size
            while(map.get(ch) > 1) {

                char chLeft = s.charAt(left);
                map.put(chLeft, map.get(chLeft) - 1);

                left++;
            }
            
            ans = Math.max(ans, right - left + 1);
            
            right++;
        }
        
        return ans;
    }
}
