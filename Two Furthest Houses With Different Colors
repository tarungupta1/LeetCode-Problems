Problem Number: 2078
Problem Name: Two Furthest Houses With Different Colors
Link: https://leetcode.com/problems/two-furthest-houses-with-different-colors/

Question
There are n houses evenly lined up on the street, and each house is beautifully painted. You are given a 0-indexed integer array colors of length n, where colors[i] 
represents the color of the ith house.
Return the maximum distance between two houses with different colors.
The distance between the ith and jth houses is abs(i - j), where abs(x) is the absolute value of x.


Video Link: https://www.youtube.com/watch?v=UBAjBuDu9L8
Editorial Link: https://leetcode.com/problems/two-furthest-houses-with-different-colors/discuss/1589141/JavaC%2B%2BPython-O(n)-Solution


Solution

APPROACH 1  

Time Complexity: O(N^2), where N is the length of the array
Space Complexity: O(1)

class Solution {
public:
    int maxDistance(vector<int>& colors) {
        
        int ans = 0;
        for(int i=0; i<colors.size(); i++){
            for(int j=i+1; j<colors.size(); j++){
                if(colors[i] != colors[j]){
                    int num = j - i;
                    ans = max(ans, num);
                }
            }
        }
        
        return ans;
    }
};



APPROACH 2

Time Complexity: O(N), where N is the length of the array
Space Complexity: O(1)

class Solution {
public:
    int maxDistance(vector<int>& colors) {
        
        int n = colors.size();
        
        // one of the buildings will be definitely edge buildings
        int i = n-1;
        while(colors[0] == colors[i]){
            i--;
        }
        
        int j = 0;
        while(colors[n-1] == colors[j]){
            j++;
        }
                
        return max(i , n - 1 - j);
    }
};



APPROACH 3

Time Complexity: O(N), where N is the length of the array
Space Complexity: O(1)

class Solution {
public:
    int maxDistance(vector<int>& colors) {
        
        // one of the buildings will be definitely edge buildings
        int ans = 0;
        int n = colors.size();
        for(int i=0; i<n; i++){
            
            if(colors[0] != colors[i]){
                ans = max(i, ans);
            }
            
            if(colors[n-1] != colors[i]){
                ans = max(n - 1 - i, ans);
            }
        }
        
        return ans;        
    }
};
