Problem Number: 2491
Problem Name: Divide Players Into Teams of Equal Skill
Link: https://leetcode.com/problems/divide-players-into-teams-of-equal-skill/

Question
You are given a positive integer array skill of even length n where skill[i] denotes the skill of the ith player. Divide the players into n / 2 teams of size 2 such that the total skill of each team is equal.
The chemistry of a team is equal to the product of the skills of the players on that team.
Return the sum of the chemistry of all the teams, or return -1 if there is no way to divide the players into teams such that the total skill of each team is equal.
 
           
            
Solution 


Time Complexity: O(N*(log(N))), where N is the length of the array
Space Complexity: O(1)


APPROACH 1
class Solution {
public:
    long long dividePlayers(vector<int>& skill) {
        
        int n = skill.size();
        sort(skill.begin(), skill.end());
        
        // This approach makes the target essentially the median of all skills.
        int maxSkillSize = skill[0] + skill[n-1];
        
        long long chemistrySum = 0;
        
        int st = 0, en = n-1;
        while(st <= en) {
            
            // if sum of skillSet doesn't match, then pairing is not possible
            if (skill[st] + skill[en] != maxSkillSize) {
                return -1;
            }
            
            chemistrySum += (skill[st] * skill[en]);
            st++;
            en--;
        }
        
        return chemistrySum;
    }
};



Time Complexity: O(N), where N is the length of the array
Space Complexity: O(N), where N is the length of the array


APPROACH 2
class Solution {
public:
    long long dividePlayers(vector<int>& skill) {
        
        int n = skill.size();
        
        // Calculate total skill and build frequency map
        unordered_map<long long, long long> mp;
        
        // total skill size of the array
        long long totalSkillSize = 0;
        for(auto i : skill) {
            totalSkillSize += i;
            mp[i]++;
        }
        
        
        int numberOfGroups = n/2;
        // Check if total skill can be evenly distributed among teams
        if (totalSkillSize % numberOfGroups != 0) {
            return -1;
        }
            
        int maxSkillSize = totalSkillSize / numberOfGroups;
        
        long long ans = 0;
        for(auto key : mp) {
            
            int personOneSkill = key.first;
            int personTwoSkill = maxSkillSize - personOneSkill;
            
            // Check if valid partner skill exists with matching frequency
            if (mp[personOneSkill] != mp[personTwoSkill]) {
                return -1;
            }
            
            // Calculate chemistry for all pairs with this skill
            ans += (personOneSkill * personTwoSkill * mp[personOneSkill]);
        }
        
        // Return half of total chemistry (as each pair is counted twice)  
        return ans / 2;
    }
};
