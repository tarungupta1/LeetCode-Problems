Problem Number: 241
Problem Name: Different Ways to Add Parentheses
Link: https://leetcode.com/problems/different-ways-to-add-parentheses/

Question
Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.
The test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed 10^4.
           


Time Complexity: O(N * (2^N)), where N is the length of the string
Space Complexity: O((N^2) * (2*N), where N is the length of the string


Solution
class Solution {
    
    HashMap<String, List<Integer>> map = new HashMap<>();
    
    public List<Integer> diffWaysToCompute(String expression) {
        
        if (map.containsKey(expression)) {
            return map.get(expression);
        }    
        
        List<Integer> ans = new ArrayList<>();
        
        for(int i=0; i<expression.length(); i++) {
            
            char ch = expression.charAt(i);
            
            if (ch == '+' || ch == '-' || ch == '*') {
                
                List<Integer> left = diffWaysToCompute(expression.substring(0, i));
                
                List<Integer> right = diffWaysToCompute(expression.substring(i+1));
                
                for(int j : left) {
                    for(int k : right) {
                        int curr;
                        if (ch == '+') {
                            curr = j + k;
                            ans.add(curr);
                        }
                        if (ch == '-') {
                            curr = j - k;
                            ans.add(curr);
                        }
                        if (ch == '*') {
                            curr = j * k;
                            ans.add(curr);
                        }                         
                    }
                }               
            }
        }
        
        if (ans.size() == 0) {
            ans.add(Integer.parseInt(expression));
        }
        
        map.put(expression, ans);
        
        return ans;
    }
}
