Problem Number: 15
Problem Name: 3Sum
Link: https://leetcode.com/problems/3sum/

Question
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.
 
           
            
Solution 


Time Complexity: O((N * log(N)) + (N * N)), where N is the length of the array
Space Complexity: O(1)


APPROACH 1
// 3 Sum -> 2 Sum Approach
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        
        int n = nums.size();
        
        sort(nums.begin(), nums.end());
        
        vector<vector<int>> ans;
        
        for(int i=0; i<n-2; i++) {
            
            // For ignoring duplicates, discarding same values
            if (i != 0 && nums[i-1] == nums[i]) {
                continue;
            }
            
            int st = i+1, en = n-1;
            while(st < en) {
                
                int val = nums[i] + nums[st] + nums[en];
                
                if (val == 0) {
                    
                    vector<int> curr(3, 0);
                    curr[0] = nums[i];
                    curr[1] = nums[st];
                    curr[2] = nums[en];
                    
                    ans.push_back(curr);
                    
                    st++;
                    en--;
                    
                    // For ignoring duplicates, discarding same values for left and right pointers
                    while (st < n && nums[st-1] == nums[st]) {
                        st++;
                    }                    
                    while (en >= 0 && nums[en] == nums[en+1]) {
                        en--;
                    }
                }
                else if (val < 0) {
                    st++;
                }
                else {
                    en--;
                }
            }
        }
        
        return ans;
    }
};



Time Complexity: O((N * log(N)) + (N * N)), where N is the length of the array
Space Complexity: O(N), where N is the length of the array


APPROACH 2
// 3 Sum -> HashMap Approach
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        
        int n = nums.size();
        
        sort(nums.begin(), nums.end());
        
        // Saving the last occurrence of the element which will be used to avoid duplicates
        unordered_map<int, int> mp;
        for(int i=0; i<n; i++) {
            mp[nums[i]] = i;
        }
        
        
        vector<vector<int>> ans;
        
        for(int i=0; i<n-2; i++) {
            
            // If first pointer is greater than zero, then there is no solution possible for this scenario
            if (nums[i] > 0) {
                continue;
            }
            
            for(int j=i+1; j<n-1; j++) {
                
                int val = -1 * (nums[i] + nums[j]);
                
                // if the val exists and its occurrence is after 2nd pointer, then only accept the pointer
                if (mp.find(val) != mp.end()  &&  mp[val] > j) {
                    
                    vector<int> curr(3, 0);
                    curr[0] = nums[i];
                    curr[1] = nums[j];
                    curr[2] = val;
                    
                    ans.push_back(curr);                    
                }
                
                // Update 2nd pointer to last occurrence of 2nd pointer element to avoid duplicates 
                j = mp[nums[j]];
            }
            
            // Update 1st pointer to last occurrence of 1st pointer element to avoid duplicates 
            i = mp[nums[i]];
        }
        
        return ans;
    }
};
