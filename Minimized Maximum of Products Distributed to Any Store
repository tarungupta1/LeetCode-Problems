Problem Number: 2064
Problem Name: Minimized Maximum of Products Distributed to Any Store
Link: https://leetcode.com/problems/minimized-maximum-of-products-distributed-to-any-store/

Question
You are given an integer n indicating there are n specialty retail stores. There are m product types of varying amounts, which are given as a 0-indexed integer 
array quantities, where quantities[i] represents the number of products of the ith product type.
You need to distribute all products to the retail stores following these rules:
  1. A store can only be given at most one product type but can be given any amount of it.
  2. After distribution, each store will have been given some number of products (possibly 0). Let x represent the maximum number of products given to any store. 
  You want x to be as small as possible, i.e., you want to minimize the maximum number of products that are given to any store.
Return the minimum possible x.


Video Link: https://www.youtube.com/watch?v=Wdh4negJaq0


Time Complexity: O(N(log(N)), where N is the total number of quantities
Space Complexity: O(1)


Solution

// applying binary search to find what should be the maximum no of products to be added for a store
class Solution {
public:
    int minimizedMaximum(int n, vector<int>& quantities) {
        
        // finding the upper limit for binary search
        int max_val = quantities[0];
        for(int i=0; i<quantities.size(); i++){
            max_val = max(max_val, quantities[i]);
        }
        
        // stores the Minimized Maximum number of Products for a store
        int ans = 0;
        int l = 1, r = max_val;
        while(l <= r){
            int mid = (r - l)/2 + l;
            
            // stores for a particular value how many stores we need
            int total_filled = 0;
            
            // finding the number of stores needed
            for(int i=0; i<quantities.size(); i++){
                total_filled += ceil(1.0 * quantities[i]/mid);                
            }
            
            // if stores needed is smaller than or equal to total number stores given, then we will search for lower values. Here equals to sign is there because we 
            // wanted to calculate the minimum, therefore, we need to search lower values
            if(total_filled <= n){
                ans = mid;
                r = mid - 1;            
            }
            // if stores needed is greater than total number stores given, then we will search for upper values.
            else{
                l = mid + 1;
            }
        }
        
        return ans;
    }
};
