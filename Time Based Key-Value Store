Problem Number: 981
Problem Name: Time Based Key-Value Store
Link: https://leetcode.com/problems/time-based-key-value-store/

Question
Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.
Implement the TimeMap class:
    TimeMap() Initializes the object of the data structure.
    void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp.
    String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev <= timestamp. If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns "".             


               
Time Complexity: O(1) for set operation and O(log(N)) for get operation, where N is the length of the values
Space Complexity: O(N), where N is the length of the values


Solution
class Pair {
    int timestamp;
    String value;
    
    Pair(int a, String b) {
        timestamp = a;
        value = b;
    }
}

class TimeMap {
    
    // Stores all the timestamps and values for a key
    HashMap<String, List<Pair>> map;
    
    public TimeMap() {
        map = new HashMap<>();            
    }
    
    public void set(String key, String value, int timestamp) {
        List<Pair> al = new ArrayList<>();
        
        if (map.containsKey(key)) {
            al = map.get(key);
        }
        
        al.add(new Pair(timestamp, value));
        map.put(key, al);
    }
    
    
    public String get(String key, int timestamp) {
        
        if (!map.containsKey(key)) {
            return "";
        }
        
        List<Pair> al = map.get(key);
        
        String ans = "";
        
        // determining the value which is just smaller or equal to timestamp
        int low = 0, high = al.size()-1;
        while (low <= high) {
            int mid = (low + ((high - low) / 2));
            
            if (al.get(mid).timestamp == timestamp) {
                ans = al.get(mid).value;
                break;
            }
            else if (al.get(mid).timestamp < timestamp) {
                ans = al.get(mid).value;
                low = mid + 1;
            }
            else {
                high = mid - 1;
            }
        }
        
        return ans;
    }
}

/**
 * Your TimeMap object will be instantiated and called as such:
 * TimeMap obj = new TimeMap();
 * obj.set(key,value,timestamp);
 * String param_2 = obj.get(key,timestamp);
 */
