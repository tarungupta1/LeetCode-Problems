Problem Number: 2106
Problem Name: Maximum Fruits Harvested After at Most K Steps
Link: https://leetcode.com/problems/maximum-fruits-harvested-after-at-most-k-steps/

Question
Fruits are available at some positions on an infinite x-axis. You are given a 2D integer array fruits where fruits[i] = [positioni, amounti] depicts amounti fruits at the 
position positioni. fruits is already sorted by positioni in ascending order, and each positioni is unique.
You are also given an integer startPos and an integer k. Initially, you are at the position startPos. From any position, you can either walk to the left or right. It takes 
one step to move one unit on the x-axis, and you can walk at most k steps in total. For every position you reach, you harvest all the fruits at that position, and the fruits 
will disappear from that position.
Return the maximum total number of fruits you can harvest.
               

Video Link: 1. https://youtu.be/y-br2Hee484?t=1926
            2. https://youtu.be/y-br2Hee484?t=3653


Solution
Time Complexity: O(N + K), where N is the maximum distance the fruit is placed or the position of the player initially and K is the number of steps the player can move
Space Complexity: O(N), where N is the maximum distance the fruit is placed or the position of the player initially


APPROACH 1
class Solution {
public:
    int maxTotalFruits(vector<vector<int>>& fruits, int startPos, int k) {
        
        int n = max(fruits[fruits.size() - 1][0], startPos) + 1;
        
        vector<int> prefix_sum(n, 0);        
        for(int i=0; i<fruits.size(); i++){
            prefix_sum[fruits[i][0]] = fruits[i][1];
        }                    
        for(int i=1; i<n; i++){
            prefix_sum[i] += prefix_sum[i-1];
        }
        
        // optimal solution is by going in one direction then going to opposite direction if needed
        
        // first going left, then going right
        int ans = 0;
        int max_left = max(0, startPos - k);        // how much left we can go at max
        for(int i=startPos; i >= max_left; i--){
            
            int dist = startPos - i;     // distance travelled
            int rem = k - dist;          // distance remaining
            
            int right = min(i + rem, n-1);    // how much right we have gone for a particular left distance
            
            // fruits picked up while going left
            int current_sum = prefix_sum[startPos];
            if(i != 0){
                current_sum -= prefix_sum[i-1];
            }
            
             // fruits picked up while going right, when the person crosses the starting position
            if(right > startPos){
                current_sum += prefix_sum[right];                
                current_sum -= prefix_sum[startPos];
            }
            
            // for every distance travelled finding the max fruits picked
            ans = max(ans, current_sum);
        }
        
        
        // first going right, then going left
        int max_right = min(n-1, startPos + k);     // how much left we can go at max
        for(int i=startPos; i <= max_right; i++){
            
            int dist = i - startPos;       // distance travelled     
            int rem = k - dist;          // distance remaining
            
            int left = max(0, i - rem);    // how much left we have gone for a particular right distance
            
             // fruits picked up while going right
            int current_sum = prefix_sum[i];
            current_sum -= prefix_sum[startPos];
            
             // fruits picked up while going left, when the person crosses the starting position
            if(left < startPos){
                current_sum += prefix_sum[startPos];
                
                if(left != 0){
                    current_sum -= prefix_sum[left - 1];
                }
            }
            
            // for every distance travelled finding the max fruits picked
            ans = max(ans, current_sum);
        }

        return ans;
    }
};



APPROACH 2
Time Complexity: O(N + K), where N is the maximum distance the fruit is placed or the position of the player initially and K is the number of steps the player can move
Space Complexity: O(N), where N is the maximum distance the fruit is placed or the position of the player initially


class Solution {
public:
    int maxTotalFruits(vector<vector<int>>& fruits, int startPos, int k) {
        
        int n = max(fruits[fruits.size() - 1][0], startPos) + 1;
        
        vector<int> prefix_sum(n, 0);        
        for(int i=0; i<fruits.size(); i++){
            prefix_sum[fruits[i][0]] = fruits[i][1];
        }                    
        for(int i=1; i<n; i++){
            prefix_sum[i] += prefix_sum[i-1];
        }
        
        
        // first going left, then going right
        int ans = 0;
        int max_left = max(0, startPos - k);        // how much left we can go at max
        for(int left=startPos; left >= max_left; left--){
            
            int dist = startPos - left;     // distance travelled
            int rem = k - dist;             // distance remaining
            
            // how much right we have gone for a particular left distance
            int right = min(left + rem, n-1);   // checking that we dont go out of bounds
            right = max(right, startPos);       // if right is smaller than startPos, we will make right to startPos as here left and right means the extreme ends of 
                                                // the travel. If right is greater than startPos, then no need to change right
            
            // total fruits picked from left to right
            int current_sum = prefix_sum[right];
            if(left != 0){
                current_sum -= prefix_sum[left-1];
            }            
            
            // for every distance travelled finding the max fruits picked
            ans = max(ans, current_sum);
        }
        
        
        // first going right, then going left
        int max_right = min(n-1, startPos + k);     // how much left we can go at max
        for(int right=startPos; right <= max_right; right++){
            
            int dist = right - startPos;       // distance travelled     
            int rem = k - dist;                // distance remaining
            
            // how much left we have gone for a particular right distance
            int left = max(0, right - rem);     // checking that we dont go out of bounds
            left = min(left, startPos);         // if left is greater than startPos, we will make left to startPos as here left and right means the extreme ends of 
                                                // the travel. If the left is smaller than startPos, then no need to change left
            
            // total fruits picked from left to right
            int current_sum = prefix_sum[right];
            if(left != 0){
                current_sum -= prefix_sum[left - 1];                
            }
            
            // for every distance travelled finding the max fruits picked
            ans = max(ans, current_sum);
        }

        return ans;
    }
};



APPROACH 3
Time Complexity: O(N), where N is length of array
Space Complexity: O(N), where N is length of array


// TWO POINTERS
class Solution {
    
private:
    
    bool isValid(int startPos, int k, int left, int right){
        
        // if right is before the startPos, then we have to check whether we can reach left position or not. If we can reach left position this means our range will 
        // be [left, startPos]
        if(right <= startPos){
            return (startPos - left <= k);                        
        }
        // if left is after the startPos, then we have to check whether we can reach right position or not. If we can reach right position this means our range will 
        // be [startPos, right]
        else if(startPos <= left){
            return (right - startPos <= k);
        }
        // if both extreme ends are on either side of startPos
        else{
            int x = startPos - left;
            int y = right - startPos;
            
            // so there are two cases possible, first if we go left and then return to startPos and then go right. Second case, if we go right and then return to startPos 
            // and then go left.
            // So we will be checking whether we can reach any of the path
            if(((2*x + y) <= k)  ||  ((x + 2*y) <= k)){
                return true;
            }
        }
        
        return false;
    }
    
public:
    int maxTotalFruits(vector<vector<int>>& fruits, int startPos, int k) {
        int n = fruits.size();
        
        int left_idx = 0;
        int right_idx = 0;
        
        int sum = 0;
        int ans = 0;
        // finding which subarray will give max fruits
        while(right_idx < n){
            // adding fruits if we reach right pointer
            sum += fruits[right_idx][1];
            
            // checking whether distance we will take is smalller than 'k'. If not then we will increase left pointer so as to decrease the distance
            while(left_idx <= right_idx  &&  isValid(startPos, k, fruits[left_idx][0], fruits[right_idx][0]) == false){
                // removing the fruits added in the process
                sum -= fruits[left_idx][1];
                
                // increasing the left pointer
                left_idx++;
            }
    
            // for a particular valid path, taking the maximum amount of fruits possible
            ans = max(sum, ans);
            
            // increasing right pointer to increase the distance
            right_idx++;
        }
        
        // returning the max fruits
        return ans;
    }
};
