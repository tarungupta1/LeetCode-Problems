Problem Number: 2090
Problem Name: K Radius Subarray Averages
Link: https://leetcode.com/problems/k-radius-subarray-averages/

Question
You are given a 0-indexed array nums of n integers, and an integer k.
The k-radius average for a subarray of nums centered at some index i with the radius k is the average of all elements in nums between the indices i - k 
and i + k (inclusive). If there are less than k elements before or after the index i, then the k-radius average is -1.
Build and return an array avgs of length n where avgs[i] is the k-radius average for the subarray centered at index i.
The average of x elements is the sum of the x elements divided by x, using integer division. The integer division truncates toward zero, which means losing its 
fractional part.
For example, the average of four elements 2, 3, 1, and 5 is (2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75, which truncates to 2.


Time Complexity: O(N)
Space Complexity: O(N)


Solution

APPROACH 1
class Solution {
public:
    vector<int> getAverages(vector<int>& nums, int k) {
        
        int n = nums.size();
        
        long long int *prefix_sum = new long long int[n];
        prefix_sum[0] = nums[0];
        for(int i=1; i<n; i++){
            prefix_sum[i] = nums[i] + prefix_sum[i-1];
        }
        
        vector<int> ans;
        for(int i=0; i<n; i++){
            if(0 <= (i-k)  &&  (i+k) < n){
                long long int num = prefix_sum[i+k];
                if(i != k){
                    num -= prefix_sum[i-k-1];
                }
                
                num = (int)(num / ((2 * k) + 1));
                ans.push_back((int)(num));
            }
            else{
                ans.push_back(-1);
            }
        }
        
        return ans;
    }
};



APPROACH 2
class Solution {
public:
    vector<int> getAverages(vector<int>& nums, int k) {
        
        int n = nums.size();
        
        long long int *prefix_sum = new long long int[n];
        prefix_sum[0] = nums[0];
        for(int i=1; i<n; i++){
            prefix_sum[i] = nums[i] + prefix_sum[i-1];
        }
        
        long long int *suffix_sum = new long long int[n];
        suffix_sum[n-1] = nums[n-1];
        for(int i=n-2; i>=0; i--){
            suffix_sum[i] = nums[i] + suffix_sum[i+1];
        }
        

        vector<int> ans;
        for(int i=0; i<n; i++){
            if((i-k) < 0  ||  n <= (i+k)){
                ans.push_back(-1);
            }
            else{
                long long int num = prefix_sum[i+k] - prefix_sum[i] + suffix_sum[i-k] - suffix_sum[i] + nums[i];
                
                num = (int)(num / ((2 * k) + 1));
                
                ans.push_back((int)(num));
            }
        }
        
        return ans;
    }
};
