Problem Number: 1381
Problem Name: Design a Stack With Increment Operation
Link: https://leetcode.com/problems/design-a-stack-with-increment-operation/

Question
Design a stack that supports increment operations on its elements.
Implement the CustomStack class:
    CustomStack(int maxSize) Initializes the object with maxSize which is the maximum number of elements in the stack.
    void push(int x) Adds x to the top of the stack if the stack has not reached the maxSize.
    int pop() Pops and returns the top of the stack or -1 if the stack is empty.
    void inc(int k, int val) Increments the bottom k elements of the stack by val. If there are less than k elements in the stack, increment all the elements in the stack.
           
            
Solution 


Time Complexity: O(1) for push and pop operation.  O(K) for increement operation where K is the elements to be incremented
Space Complexity: O(N), where N is the maximum size of the array


APPROACH 1
class CustomStack {

    int[] arr;
    int front;      // donetes bottom of the stack
    int rear;       // denotes top of the stack
    int maxSize;
    
    public CustomStack(int maxSize) {
        
        arr = new int[maxSize];
        front = -1;
        rear = -1;
        this.maxSize = maxSize;
    }
    
    public void push(int x) {
        
        if (isFull()) {
            return;
        }
        
        if (front == -1 && rear == -1) {
            front = 0;
            rear = 0;            
        } 
        else {
            rear = (rear + 1) % maxSize;
        }
        
        arr[rear] = x;
    }
    
    public int pop() {
        
        if (isEmpty()) {
            return -1;
        }
        
        int ans = arr[rear];
        
        if (front == rear) {
            front = -1;
            rear = -1;
        }
        else {
            rear = (rear - 1 + maxSize) % maxSize;
        }
        
        return ans;
    }
    
    public void increment(int k, int val) {
        
        if (isEmpty()) {
            return;
        }
        
        // determine size of the stack
        int size;
        if (front <= rear) {
            size = rear - front + 1;
        }
        else {
            size = rear + maxSize - front;
        }
        
        // Number of iterations required for increementing
        int count = Math.min(k, size);
        for(int i=0; i<count; i++) {
            int idx = (front + i) % maxSize;
            arr[idx] += val;
        }
    }
            
    private boolean isEmpty() {
        
        if (front == -1 && rear == -1) {
            return true;
        }
        else {
            return false;
        }
    }
    
    private boolean isFull() {
        
        if (front <= rear) {
            if (front == 0 && rear == maxSize-1) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            if (rear + 1 == front) {
                return true;
            }
            else {
                return false;
            }
        }
    }
}
/**
 * Your CustomStack object will be instantiated and called as such:
 * CustomStack obj = new CustomStack(maxSize);
 * obj.push(x);
 * int param_2 = obj.pop();
 * obj.increment(k,val);
 */



Time Complexity: O(1) for push, pop and increement operation
Space Complexity: O(N), where N is the maximum size of the array


APPROACH 2
class CustomStack {

    int[] arr;
    int front;      // donetes bottom of the stack
    int rear;       // denotes top of the stack
    int maxSize;
    int[] incrementArr;   // how much increment needs to be done to an element
    
    public CustomStack(int maxSize) {
        
        arr = new int[maxSize];
        incrementArr = new int[maxSize];
        front = -1;
        rear = -1;
        this.maxSize = maxSize;
    }
    
    public void push(int x) {
        
        if (isFull()) {
            return;
        }
        
        if (front == -1 && rear == -1) {
            front = 0;
            rear = 0;            
        } 
        else {
            rear = (rear + 1) % maxSize;
        }
        
        arr[rear] = x;
    }
    
    public int pop() {
        
        if (isEmpty()) {
            return -1;
        }
        
        int ans = arr[rear] + incrementArr[rear];            
        
        int topmostIndex = rear;
        
        if (front == rear) {
            front = -1;
            rear = -1;
        }
        else {
            rear = (rear - 1 + maxSize) % maxSize;
            
            // updating the new top element with the increment
            incrementArr[rear] += incrementArr[topmostIndex];
        }
        
        // resetting
        incrementArr[topmostIndex] = 0;
        
        return ans;
    }
    
    public void increment(int k, int val) {
        
        if (isEmpty()) {
            return;
        }
        
        // determines the size of stack
        int size;
        if (front <= rear) {
            size = rear - front + 1;
        }
        else {
            size = rear + maxSize - front;
        }
        
        // determines how many indexes need to be incremented
        int count = Math.min(k, size);
        
        // topMost index till where we need to update
        int topmostIndex = (front + count - 1) % maxSize;
        
        incrementArr[topmostIndex] += val;
    }
            
    private boolean isEmpty() {
        
        if (front == -1 && rear == -1) {
            return true;
        }
        else {
            return false;
        }
    }
    
    private boolean isFull() {

        if (front <= rear) {
            if (front == 0 && rear == maxSize-1) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            if (rear + 1 == front) {
                return true;
            }
            else {
                return false;
            }
        }
    }
}
/**
 * Your CustomStack object will be instantiated and called as such:
 * CustomStack obj = new CustomStack(maxSize);
 * obj.push(x);
 * int param_2 = obj.pop();
 * obj.increment(k,val);
 */
