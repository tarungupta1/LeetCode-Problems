Problem Number: 2097
Problem Name: Valid Arrangement of Pairs
Link: https://leetcode.com/problems/valid-arrangement-of-pairs/

Question
You are given a 0-indexed 2D integer array pairs where pairs[i] = [starti, endi]. An arrangement of pairs is valid if for every index i where 1 <= i < pairs.length, 
we have endi-1 == starti.
Return any valid arrangement of pairs.
Note: The inputs will be generated such that there exists a valid arrangement of pairs.


Editorial Link: 1. https://leetcode.com/problems/reconstruct-itinerary/discuss/78768/Short-Ruby-Python-Java-C%2B%2B
                2. https://leetcode.com/problems/valid-arrangement-of-pairs/discuss/1611978/C%2B%2B-Eulerian-Path-with-Explanation
                3. https://leetcode.com/problems/valid-arrangement-of-pairs/discuss/1618885/Iterative-and-Recursive
                4. https://www.geeksforgeeks.org/hierholzers-algorithm-directed-graph/
                

Time Complexity: O(M + N), where N is the number of nodes in the tree and M is the number of edges in the tree
Space Complexity: O(M + N), where N is the number of nodes in the tree and M is the number of edges in the tree



Solution
class Solution {
    
    // acts as a graph
    HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
    
    // stores the answer
    ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
    
    // stores the indegree and outdegree for all nodes
    HashMap<Integer, Integer> degree = new HashMap<>();
    
    
    public int[][] validArrangement(int[][] pairs) {
        
        // initialing graph and degree of nodes
        for(int i=0; i<pairs.length; i++){            
            ArrayList<Integer> al = new ArrayList<>();
            
            if(map.containsKey(pairs[i][0])){
                al = map.get(pairs[i][0]);
            }
               
            al.add(pairs[i][1]);
            
            map.put(pairs[i][0], al);            
            
            degree.put(pairs[i][0], degree.getOrDefault(pairs[i][0], 0) + 1);
            degree.put(pairs[i][1], degree.getOrDefault(pairs[i][1], 0) - 1);
        }
        
        // finding the starting element
        int start = -1;
        for(int key : map.keySet()){
            
            if(degree.get(key) > 0){
                start = key;
                break;
            }
        }
        
        if(start == -1){
            start = pairs[0][0];
        }
        
        
        // applying DFS
        dfs(start, ans);
        
        // reversing the arraylist we got from DFS
        int[][] temp = new int[ans.size()][2];
        int k = 0;
        for(int i = ans.size() - 1; i>=0; i--){
            temp[k][0] = ans.get(i).get(0);
            temp[k][1] = ans.get(i).get(1);
            k++;
        }
        
        // returning the answer
        return temp;
    }
    
    // POSTORDER BFS
    public void dfs(int node, ArrayList<ArrayList<Integer>> ans){
        
        // traversing all neighbours
        while(map.containsKey(node) == true  &&  map.get(node).size() > 0){
            // storing the neighbour and then removing it so that it is not available in further DFS
            // we are removing from end of the arraylist. We can also remove from starting but the time complexity increases.
            int nbr = map.get(node).get(map.get(node).size() - 1);
            map.get(node).remove(map.get(node).size() - 1);
            
            // applying DFS again
            dfs(nbr, ans);

            // when we have travelled the particular neigbour we will store the neighbour in the answer
            ans.add(new ArrayList<Integer>(Arrays.asList(node, nbr)));
        }
    }
}
