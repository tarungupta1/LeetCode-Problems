Problem Number: 2069
Problem Name: Walking Robot Simulation II
Link: https://leetcode.com/problems/walking-robot-simulation-ii/

Question
A width x height grid is on an XY-plane with the bottom-left cell at (0, 0) and the top-right cell at (width - 1, height - 1). The grid is aligned with the four 
cardinal directions ("North", "East", "South", and "West"). A robot is initially at cell (0, 0) facing direction "East".
The robot can be instructed to move for a specific number of steps. For each step, it does the following.
  1. Attempts to move forward one cell in the direction it is facing.
  2. If the cell the robot is moving to is out of bounds, the robot instead turns 90 degrees counterclockwise and retries the step.
  
After the robot finishes moving the number of steps required, it stops and awaits the next instruction.
Implement the Robot class:
  1. Robot(int width, int height) Initializes the width x height grid with the robot at (0, 0) facing "East".
  2. void step(int num) Instructs the robot to move forward num steps.
  3. int[] getPos() Returns the current cell the robot is at, as an array of length 2, [x, y].
  4. String getDir() Returns the current direction of the robot, "North", "East", "South", or "West".
 


Time Complexity: O(1)
Space Complexity: O(1)


Solution


/* To get rid of TLE we do % of num with (w * 2 + h * 2 - 4) because we have to travel through parimeter of the given grid and after travelling (w * 2 + h * 2 - 4)
we will reach the same position.
if you wondered why we subtract 4 from (w * 2 + h * 2). Reason: if we simply do n*m we will travel all the corner edges 2 times so to manage this we have to 
subtract 4 from (w * 2 + h * 2). 
*/

class Robot {
public:
    
    // stores total number of steps moved till now
    long long int total;
    
    // stores height and width of the matrix
    long long int row, col;
    
    Robot(int width, int height) {
        // initialising
        row = height;
        col = width;
        total = 0;
    }
    
    // counting total number of steps walked
    void step(int num) {        
        total += num;
    }
        
    vector<int> getPos() {
        
        // taking mod
        int val = total % (2 * (row + col - 2));
        
        // storing the answer
        vector<int> ans;
        
        // MOTE: here we are printing X-coordinate first then Y-coordinate i.e first column then row
        
        // as we will be travelling the perimeter, so one coordinate will be the boundary
        
        // when the robot hasn't rotated once. i.e. it is still at y = 0
        if(val < col){
            ans.push_back(val);     // distance travelled will be val only
            ans.push_back(0);            
        }
        // when the robot has rotated once only. i.e. it is still at x = width - 1
        else if(val < (row + col - 1)){
            ans.push_back(col - 1);     // distance travelled will be difference between val and )col - 1)
            ans.push_back(val - (col - 1));            
        }
        // when the robot has rotated twice only. i.e. it is still at y = height - 1
        else if(val < (col + col + row - 2)){            
            ans.push_back(col - 1 - (val - (row + col - 2)));   // distance travelled will be difference between val and (row + col - 2)
            ans.push_back(row-1);
        }
        // when the robot has rotated thrice only. i.e. it is still at x = 0
        else{            
            ans.push_back(0);
            ans.push_back(row - 1 - (val - (row + col + col - 3)));     // distance travelled will be difference between val and (row + col + col - 3)
        }
                                     
        return ans;         
    }
    
    string getDir() {
        
        int val = total % (2 * (row + col - 2));
        
        string ans = "";
        
        // EDGE Case
        // when robot hasnt moved. it will point towards East
        if(val == 0  &&  total == 0){
            return "East";
        }
        // when robot came at the starting position again. it will point towards South
        else if(val == 0  &&  total != 0){
            return "South";
        }
        
        // when the robot hasn't rotated once. it will point towards East
        if(val < col){
            ans += "East";            
        }
        // when the robot has rotated once only. it will point towards North
        else if(val < (row + col - 1)){
            ans += "North";
        }
        // when the robot has rotated twice only. it will point towards West
        else if(val < (col + col + row - 2)){            
            ans += "West";
        }
        // when the robot has rotated thrice only. it will point towards South
        else{            
            ans += "South";
        }
          
        return ans;
    }
};

/**
 * Your Robot object will be instantiated and called as such:
 * Robot* obj = new Robot(width, height);
 * obj->step(num);
 * vector<int> param_2 = obj->getPos();
 * string param_3 = obj->getDir();
 */
