Problem Number: 74
Problem Name: Search a 2D Matrix
Link: https://leetcode.com/problems/search-a-2d-matrix/

Question
You are given an m x n integer matrix matrix with the following two properties:
    Each row is sorted in non-decreasing order.
    The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.
You must write a solution in O(log(m * n)) time complexity.
 
           
            
Solution 


Time Complexity: O(N^2), where N is the length of the array
Space Complexity: O(N), where N is the length of the array


APPROACH 1
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
        int low = 0, high = matrix.length-1;
        
        // check in which row the target may exist. Checking the first element in the row
        while(low <= high) {
            int mid = (low + (high - low)/2);
            
            if (matrix[mid][0] == target) {
                return true;
            }
            // If first element is smaller than the target, then there is a possibility that target might be present in that row
            else if (matrix[mid][0] < target) {
                
                // checking in a particular row
                int start = 0, end = matrix[0].length-1;
                while(start <= end) {
                    int middle = (start + (end - start)/2);
                    
                    if (matrix[mid][middle] == target) {
                        return true;
                    }
                    else if(matrix[mid][middle] < target) {
                        start = middle + 1;
                    }
                    else {
                        end = middle - 1;
                    }
                }
                low = mid + 1;
            }
            // if first element is greater than the target, then there is no possibility of target present in that row
            else {
                high = mid - 1;
            }
        }
        
        return false;
    }
}



Time Complexity: O(log(N * M)), where N and M is the row length and column length of the array
Space Complexity: O(1)


APPROACH 2
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
        int n = matrix.length;
        int m = matrix[0].length;
        
        int low = 0, high = (n*m)-1;
        
        // Making the 2D array as 1D array as they are sorted so it won't cause any issues
        while(low <= high) {
            int mid = (low + (high - low)/2);
            
            // finding the position of the element 
            int row = mid / m;
            int col = mid % m;
            
            if (matrix[row][col] == target) {
                return true;
            }
            else if (matrix[row][col] < target) {
                low = mid + 1;
            }
            else {
                high = mid - 1;
            }
        }
        
        return false;
    }
}
