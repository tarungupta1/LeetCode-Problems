Problem Number: 2092
Problem Name: Find All People With Secret
Link: https://leetcode.com/problems/find-all-people-with-secret/

Question
You are given an integer n indicating there are n people numbered from 0 to n - 1. You are also given a 0-indexed 2D integer array meetings where 
meetings[i] = [xi, yi, timei] indicates that person xi and person yi have a meeting at timei. A person may attend multiple meetings at the same time. 
Finally, you are given an integer firstPerson.
Person 0 has a secret and initially shares the secret with a person firstPerson at time 0. This secret is then shared every time a meeting takes place with a person 
that has the secret. More formally, for every meeting, if a person xi has the secret at timei, then they will share the secret with person yi, and vice versa.
The secrets are shared instantaneously. That is, a person may receive the secret and share it with people in other meetings within the same time frame.
Return a list of all the people that have the secret after all the meetings have taken place. You may return the answer in any order.


Video Link: https://www.youtube.com/watch?v=2101sEZ3EmI
Editorial Link: https://leetcode.com/problems/find-all-people-with-secret/discuss/1599887/C%2B%2B-Simple-Solution-w-Explanation-or-Sort-by-Time-and-Disjoin-Set-Union


Solution

APPROACH 1(check the video to understand)

Time Complexity: O((M log M) + N), where M is number of meetings
Space Complexity: O(N), where N is the number of people/ nodes

// Applying BFS using Priority Queue
class Solution {
public:
    vector<int> findAllPeople(int n, vector<vector<int>>& meetings, int firstPerson) {
        
        vector<vector<pair<int, int>>> graph(n);
        // initialising graph
        for(int i=0; i<meetings.size(); i++){
            graph[meetings[i][0]].push_back({meetings[i][1], meetings[i][2]});
            graph[meetings[i][1]].push_back({meetings[i][0], meetings[i][2]});
        }
        
        // using priority queue to implement BFS 
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        // priority queue will be storing the time when the node will knwo the secret and the node number
        
        // stores which node we have traversed so far
        vector<bool> visited(n);
        
        // at starting 2 people know the secret
        pq.push({0, 0});
        pq.push({0, firstPerson});
        
        
        while(!pq.empty()){
            
            // storing the top element
            auto[t, x] = pq.top();
            pq.pop();
            
            // if we have visited then continue
            if(visited[x] == true){
                continue;
            }
            
            // marking it visited
            visited[x] = true;
            
            // for all the neighbours of the current node
            for(auto &it : graph[x]){
                // if we have visited then continue
                if(visited[it.first] == true){
                    continue;
                }
                
                // if the time of meeting is greater than or equal to the time the secret is being told to the current node, then the current node can share the secret.
                It means if the meeting with other node is before the current node gets to know the secret, then current node wont be able to tell the secret.
                if(it.second >= t){
                    pq.push({it.second, it.first});
                }
            }
        }
        
        // here the visited will be the ones who know the secret
        vector<int> ans;
        for(int i=0; i<n; i++){
            if(visited[i] == true){
                ans.push_back(i);
            }
        }
        
        return ans;
    }
};



APPROACH 2  (check the editorial to understand)

Time Complexity: O(M log M), where M is number of meetings
Space Complexity: O(N), where N is the number of people/ nodes

// standard DSU template with slight modifications in par & sz
class DSU {
public:
    unordered_map<int, int> par, sz;            // par denotes representative of a component, sz denotes size
    
    // DSU operations
    
    // initialising everything
    void init(vector<pair<int, int>>& meets) {
        par.clear(); sz.clear();
		// initially all person are set as their own parents and size of each component = 1
        for(auto& [i, j] : meets) par[i] = i, par[j] = j, sz[i] = sz[j] = 1;
    }

    int find(int x) {                          // find parent of a given member x
        return par[x] == x ? x : par[x] = find(par[x]);
    }

    void Union(int x, int y) {                 // unions two component by size
        int xp = find(x), yp = find(y);
        if(xp == yp) return;
        if(sz[xp] > sz[yp]) par[yp] = par[xp], sz[xp] += sz[yp];
        else par[xp] = par[yp], sz[yp] += sz[xp];
    }
};


class Solution {
public:
    vector<int> findAllPeople(int n, vector<vector<int>>& M, int F) {
        // stores the time and the people present at that particular time
        map<int, vector<pair<int, int>>> mp;             // {time: [meetingPair]}
        
        // denotes people who knows the secret
        unordered_set<int> secrets{0, F}, curSecrets, pars;
        
        
        DSU d;
        
        // storing the meeting details
        for(auto& m : M) 
            mp[m[2]].emplace_back(m[0], m[1]);
        
        // traversing all the meeting timings
        for(auto& [t, meets] : mp) {
            // reinitialising
            curSecrets.clear();
            d.init(meets);
            
            
            // if the person in the meeting knows the secret storing in currSecrets so that we can know who all know the secret
            for(auto& [i, j] : meets) {
                d.Union(i, j);                                  // two people meeting together are unioned into single group
                if(secrets.count(i)) curSecrets.insert(i);      // curSecret is filled with people knowing secret before time t
                if(secrets.count(j)) curSecrets.insert(j);
            }
            
            // if no one knows the secret then continuing to next meeting time
            if(!size(curSecrets)) continue;
            
            // reinitialising
            pars.clear();
            
            // finding parents of all those who know the secret, (will help in finding the disjoint sets)
            for(auto person : curSecrets){
				pars.insert(d.find(person));                    // get parents in DSU of all person who initially knew secret
            }
            
			// if parent of a new person equals parent of person who knew secret, then add it to global set of people who know secret
            for(auto& [i, j] : meets) {
                if(pars.count(d.find(i))) secrets.insert(i);   
                if(pars.count(d.find(j))) secrets.insert(j);
            }
        }
        
        // returning who know the secret
        return vector<int>{ begin(secrets), end(secrets) };
    }
};
