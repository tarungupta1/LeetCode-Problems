Problem Number: 2073
Problem Name: Time Needed to Buy Tickets
Link: https://leetcode.com/problems/time-needed-to-buy-tickets/

Question
There are n people in a line queuing to buy tickets, where the 0th person is at the front of the line and the (n - 1)th person is at the back of the line.
You are given a 0-indexed integer array tickets of length n where the number of tickets that the ith person would like to buy is tickets[i].
Each person takes exactly 1 second to buy a ticket. A person can only buy 1 ticket at a time and has to go back to the end of the line (which happens instantaneously) 
in order to buy more tickets. If a person does not have any tickets left to buy, the person will leave the line.
Return the time taken for the person at position k (0-indexed) to finish buying tickets.


Editorial Link: https://leetcode.com/problems/time-needed-to-buy-tickets/discuss/1576932/C%2B%2B-One-Pass


Time Complexity: O(N), where N is the number of elements in arr
Space Complexity: O(1)


Solution

class Solution {
public:
    int timeRequiredToBuy(vector<int>& tickets, int k) {
        
        int ans = 0;        
        int n = tickets.size();
        for(int i=0; i<n; i++){
            if(i <= k){
                ans += min(tickets[i], tickets[k]);
            }
            else{
                ans += min(tickets[i], tickets[k]-1);
            }
        }
        
        return ans;
    }
};
