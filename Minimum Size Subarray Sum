Problem Number: 209
Problem Name: Minimum Size Subarray Sum
Link: https://leetcode.com/problems/minimum-size-subarray-sum/

Question
Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [nums_l, nums_(l+1), ..., nums_(r-1), nums_r] 
of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.


Solution

APPROACH 1  

Time Complexity: O(N^2), where N is the length of the array
Space Complexity: O(1)

class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        
        int ans = Integer.MAX_VALUE;
        // we traverse all subarrays for every element
        for(int i=0; i<nums.length; i++){
            
            // stores sum for a subarray from (i to j)
            long sum = 0;
            
            // traversing each subarray and checking whether the sum of subarray exceeds the target or not
            for(int j=i; j<nums.length; j++){
                sum += nums[j];
                
                // if we find the subarray, which exceeds the target, we will stop there as we need smallest subarray. Thus we will start with other element
                if(sum >= target){
                    ans = Math.min(ans, j - i + 1);
                    break;
                }
            }
        }
        
        // if no subarray's sum is greater than the target, we will return 0
        if(ans == Integer.MAX_VALUE){
            return 0;            
        }
        else{
            return ans;
        }
    }
}



APPROACH 2

Time Complexity: O(N^2), where N is the length of the array
Space Complexity: O(N), where N is the length of the array

class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        
        int n = nums.size();
        
        // precomputing the prefix sum
        int *prefix_sum = new int[n];
        prefix_sum[0] = nums[0];
        for(int i=1; i<n; i++){
            prefix_sum[i] = prefix_sum[i-1] + nums[i];
        }
        
        // traversing all subarrays 
        int ans = INT_MAX;
        for(int i=0; i<n; i++){
            // for a particular elements finding all subarrays
            for(int j=i; j<n; j++){
                // finding the sum
                int sum = prefix_sum[j] - prefix_sum[i] + nums[i];
                
                // if we find the subarray, which exceeds the target, we will stop there as we need smallest subarray. Thus we will start with other element
                if(sum >= target){
                    ans = min(ans, j - i + 1);
                    break;
                }
            }
        }
        
        // if no subarray's sum is greater than the target, we will return 0
        if(ans == INT_MAX){
            return 0;            
        }
        else{
            return ans;
        }
        
    }
};



APPROACH 3

Time Complexity: O(N * log(N)), where N is the length of the array
Space Complexity: O(N), where N is the length of the array

class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        
        int n = nums.size();
        
        // precomputing the prefix sum
        vector<int> prefix_sum(n+1, 0);     // size = n+1 for easier calculations
        for(int i=1; i<=n; i++){
        /*            
            prefix_sum[0]=0 : Meaning that it is the sum of first 0 elements
            prefix_sum[1]=A[0] : Sum of first 1 elements
            ans so on...
        */
            prefix_sum[i] = prefix_sum[i-1] + nums[i-1];
        }
        
        
        // traversing all subarrays 
        int ans = INT_MAX;
        for(int i=1; i<=n; i++){
            // stores minimum sum, for a particular element for which it exceeds the target
            int min_sum = target + prefix_sum[i-1];
            /*
                Above equation is found by: 
                    => target = prefix_sum(j) - prefix_sum(i) + nums(i);
                    => prefix_sum(j) = target + prefix_sum(i) - nums(i);
                    => prefix_sum(j) = target + nums(i) + prefix_sum(i-1) - nums(i);
                    => prefix_sum(j) = target + prefix_sum(i-1);
            */
            
            // finds the index till we need subarray to exceed the target
            auto idx = lower_bound(prefix_sum.begin(), prefix_sum.end(), min_sum);
            
            // if it is not possible to create one, break there as no more subarrays can't be made because all numbers are positive and if 'x' numbers can make a 
            // valid subarray, then there is no subarray possible with less than 'x' elements after this particular index
            if(idx != prefix_sum.end()){
                // finding the length of the subarray formed
                int length = idx - (prefix_sum.begin() + i - 1);
                ans = min(ans, length);
            }
            else{
                break;
            }
            
        }
        
        // if no subarray's sum is greater than the target, we will return 0
        if(ans == INT_MAX){
            return 0;            
        }
        else{
            return ans;
        }
        
    }
};



APPROACH 4

Time Complexity: O(N), where N is the length of the array
Space Complexity: O(1)

// Slding Window
class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        
        int n = nums.size();
        
        int ans = INT_MAX;
        int left = 0, right = 0;
        int sum = 0;        
        while(right < n){
            
            // increasing the window to get sum of subarray greater than target
            sum += nums[right];            
            
            // shortening the window to get minimum subarray which exceeds the target
            while(sum >= target){
                ans = min(ans, right - left + 1);
                sum -= nums[left];
                left++;
            }
            
            right++;
        }
        
        // if no subarray's sum is greater than the target, we will return 0
        if(ans == INT_MAX){
            return 0;            
        }
        else{
            return ans;
        }        
    }
};
