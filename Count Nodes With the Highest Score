Problem Number: 2049
Problem Name: Count Nodes With the Highest Score
Link: https://leetcode.com/problems/count-nodes-with-the-highest-score/

Question
There is a binary tree rooted at 0 consisting of n nodes. The nodes are labeled from 0 to n - 1. You are given a 0-indexed integer array parents representing the tree, 
where parents[i] is the parent of node i. Since node 0 is the root, parents[0] == -1.
Each node has a score. To find the score of a node, consider if the node and the edges connected to it were removed. The tree would become one or more non-empty subtrees. 
The size of a subtree is the number of the nodes in it. The score of the node is the product of the sizes of all those subtrees.
Return the number of nodes that have the highest score.


Time Complexity: O(N), where N is total number of nodes
Space Complexity: O(N), where N is total number of nodes


Solution 

APPROACH 1
class Solution {
    
    // creating a tree
    class TreeNode {
        TreeNode left, right;
        long ans;
        int count_nodes;
        
        TreeNode(TreeNode x, TreeNode y, long z, int w){
            left = x;
            right = y;
            ans = z;
            count_nodes = w;
        }
    }

    // to count the number of subtrees for a particular node
    public int countNodes(TreeNode root){
        if(root == null){
            return 0;
        }
        
        return root.count_nodes = countNodes(root.left) + countNodes(root.right) + 1;         
    }
    
    public int countHighestScoreNodes(int[] parents) {
        
        int n = parents.length;
                
        // initialising the tree
        TreeNode[] tree = new TreeNode[n];        
        for(int i=0; i<n; i++){
            tree[i] = new TreeNode(null, null, 0, 0);
        }
        
        // connecting the tree i.e. joining all the nodes as given in the question
        for(int i=1; i<n; i++){
            int parent = parents[i];
            
            // first joining left child
            if(tree[parent].left == null){
                tree[parent].left = tree[i];
            }
            else{
                tree[parent].right = tree[i];
            }
        }
        
        // counting nodes in a subtree for each node
        countNodes(tree[0]);
        
        
        long max_ans = 0;   // stores the max product of subtrees
        int count = 0;      // stores number of nodes who have max product
        
        for(int i=0; i<n; i++){
            // storing the left subtree nodes
            int left_child_count = (tree[i].left == null ? 0 : tree[i].left.count_nodes);
            
            // storing the right subtree nodes
            int right_child_count = (tree[i].right == null ? 0 : tree[i].right.count_nodes);
            
            // storing remaining nodes
            int remaining_nodes = n - (tree[i].count_nodes);
            
            // stores the product of subtrees for a node
            long current_ans = 1;
            
            // when left subtree is present
            if(left_child_count > 0){
                current_ans *= left_child_count;
            }
            
            // when right subtree is present
            if(right_child_count > 0){
                current_ans *= right_child_count;
            }
            
            // when subtree above the node is present
            if(remaining_nodes > 0){
                current_ans *= remaining_nodes;
            }
            
            // if current product is greater than the max_ans, we will change the value
            if(max_ans < current_ans){
                max_ans = current_ans;
                count = 1;
            }
            // when current_product and max_ans is same, so we will increase the count by 1
            else if(max_ans == current_ans){
                count++;
            }            
        }
        
        return count;
    }
}



APPROACH 2
/*
    This solution is generalised to perform for any tree, not only binary tree. 
    To calculate score for each node, we need the number of nodes in the subtrees whose root is a child of the current node and also the number of nodes in the 
    remaining tree excluding the subtree with root at the current node. Once we have these values we find the product of the non-zero values among them and update the 
    maximum score and the count of the number of nodes with the maximum score.
*/

class Solution {
public:
    
    // traversing each node and finding it's subtree product
    long dfs(vector<long long int>& ans, vector<vector<int>>& graph, int idx){
    
        int total_nodes = 0;
        long long int product_of_subtrees = 1;
        
        // all subtrees
        for(int i : graph[idx]){
            long nodes = dfs(ans, graph, i);
            
            total_nodes += nodes;
            
            product_of_subtrees *= nodes;
        }
                
        
        long long int remaining_nodes = (long long int)(graph.size() - total_nodes - 1);
        if(remaining_nodes > 0){
            product_of_subtrees *= remaining_nodes;
        }
        
        ans[idx] = product_of_subtrees;
        
        // returning count of a subtree
        return total_nodes + 1;
    }
    
    
    int countHighestScoreNodes(vector<int>& parents) {
        
        int n = parents.size();
        
        // creating tree
        vector<vector<int>> graph(n);
        for(int i=1; i<n ;i++){
            graph[parents[i]].push_back(i);
        }
        
        // stores subarray products
        vector<long long int> ans(n);
        
        dfs(ans, graph, 0);
        
        
        long long max_ans = 0;
        int count = 0;
        
        for(int i=0; i<n; i++){
            if(max_ans < ans[i]){
                max_ans = ans[i];
                count = 1;
            }
            else if(max_ans == ans[i]){
                count++;
            }
        }
        
        return count;
    }
};
