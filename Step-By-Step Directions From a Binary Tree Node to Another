Problem Number: 2096
Problem Name: Step-By-Step Directions From a Binary Tree Node to Another
Link: https://leetcode.com/problems/step-by-step-directions-from-a-binary-tree-node-to-another/

Question
You are given the root of a binary tree with n nodes. Each node is uniquely assigned a value from 1 to n. You are also given an integer startValue representing the value 
of the start node s, and a different integer destValue representing the value of the destination node t.
Find the shortest path starting from node s and ending at node t. Generate step-by-step directions of such path as a string consisting of only the uppercase 
letters 'L', 'R', and 'U'. Each letter indicates a specific direction:
  -> 'L' means to go from a node to its left child node.
  -> 'R' means to go from a node to its right child node.
  -> 'U' means to go from a node to its parent node.
  
Return the step-by-step directions of the shortest path from node s to node t.


Editorial Link: https://leetcode.com/problems/step-by-step-directions-from-a-binary-tree-node-to-another/discuss/1613071/Idea-Explained-oror-LCA-Tree-Traversal-and-Backtracking-oror-C%2B%2B-Clean-Code
Video Link: https://youtu.be/hP5IM8hCiT4?t=3496


Time Complexity: O(N), where N is the number of nodes in the tree
Space Complexity: O(N), where N is the number of nodes in the tree


Solution
APPROACH 1
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public ArrayList<TreeNode> traversal(TreeNode root, int val){
        
        if(root == null){
            return new ArrayList<TreeNode>();
        }
        
        if(root.val == val){
            ArrayList<TreeNode> al = new ArrayList<TreeNode>();
            al.add(root);
            return al;
        }
        
        ArrayList<TreeNode> left = traversal(root.left, val);
        if(left.size() != 0){
            left.add(root);
            return left;
        }
        
        ArrayList<TreeNode> right = traversal(root.right, val);
        if(right.size() != 0){
            right.add(root);
            return right;
        }
        else{
            return new ArrayList<TreeNode>();
        }
    }
    
    public String getDirections(TreeNode root, int startValue, int destValue) {
        
        ArrayList<TreeNode> one = traversal(root, startValue);
        ArrayList<TreeNode> two = traversal(root, destValue);
        
        int s = one.size() - 1;
        int t = two.size() - 1;
        
        while(s >= 0  &&  t >= 0  &&  one.get(s) == two.get(t)){
            s--;
            t--;            
        }
        
        s++;
        t++;
        
        StringBuilder ans = new StringBuilder();
        for(int temp = 0; temp != s; temp++){
            ans.append("U");
        }
        
        while(t > 0){
            TreeNode node = two.get(t);
            
            if(node.left == two.get(t-1)){
                ans.append("L");
            }
            else{
                ans.append("R");
            }
            
            t--;
        }
        
        return ans.toString();
    }
}



APPROACH 2
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public boolean traversal(TreeNode root, int val, StringBuilder sb){
        
        if(root.val == val){
            return true;
        }
        
        if(root.left != null  &&  traversal(root.left, val, sb)){
            sb.append("L");
            return true;
        }
        else if(root.right != null  &&  traversal(root.right, val, sb)){
            sb.append("R");
            return true;
        }
        else{
            return false;
        }
    }
    
    public String getDirections(TreeNode root, int startValue, int destValue) {
        
        StringBuilder one = new StringBuilder();
        traversal(root, startValue, one);
        
        StringBuilder two = new StringBuilder();
        traversal(root, destValue, two);

        
        int s = one.length() - 1;
        int t = two.length() - 1;
        
        while(s >= 0  &&  t >= 0  &&  one.charAt(s) == two.charAt(t)){
            s--;
            t--;            
        }
        
        StringBuilder ans = new StringBuilder();
        for(int temp = 0; temp <= s; temp++){
            ans.append("U");
        }
        
        while(t >= 0){
            ans.append(two.charAt(t));
            t--;
        }
        
        return ans.toString();
    }
}



APPROACH 3
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
private: 
    TreeNode* lca(TreeNode* root, int u, int v){
        if(root == NULL){
            return NULL;
        }
        
        if(root->val == u  ||  root->val == v){
            return root;
        }
        
        TreeNode* left = lca(root->left, u, v);
        TreeNode* right = lca(root->right, u, v);
        
        if(left != NULL  &&  right != NULL){
            return root;
        }
        else if(left == NULL){
            return right;
        }
        else if(right == NULL){
            return left;
        }
        else{
            return NULL;
        }
    }
    
    bool findPath(TreeNode* root, int target, string& ans){
        if(root == NULL){
            return false;
        }
        
        if(root->val == target){
            return true;
        }
        
        if(findPath(root->left, target, ans) == true){
            ans += "L";
            return true;
        }
        
        if(findPath(root->right, target, ans) == true){
            ans += "R";
            return true;
        }
        
        return false;
    }
    
    
public:
    string getDirections(TreeNode* root, int startValue, int destValue) {
        
        // returns the LCA
        TreeNode* lc = lca(root, startValue, destValue);
        
        // path from LCA to start node
        string path_start_to_lc;
        findPath(lc, startValue, path_start_to_lc);
        
        // path from LCA to end node
        string path_end_to_lc;
        findPath(lc, destValue, path_end_to_lc);
        
        // path from LCA to start node will become "U" and tis will be first half of the answer
        string ans = "";
        for(int i : path_start_to_lc){
            ans += "U";
        }

        // path from LCA to end node will be the other half of the answer
        for(int i = path_end_to_lc.length() - 1; i>=0; i--){
            ans += path_end_to_lc[i];
        }
        
        return ans;
    }
};
