Problem Number: 2104
Problem Name: Sum of Subarray Ranges
Link: https://leetcode.com/problems/sum-of-subarray-ranges/

Question
You are given an integer array nums. The range of a subarray of nums is the difference between the largest and smallest element in the subarray.
Return the sum of all subarray ranges of nums.
A subarray is a contiguous non-empty sequence of elements within an array.


Editorial Link: 1. https://leetcode.com/problems/sum-of-subarray-ranges/discuss/1624222/JavaC%2B%2BPython-O(n)-solution-detailed-explanation
                2. https://leetcode.com/problems/sum-of-subarray-ranges/discuss/1626628/O(n)-solution-with-monotonous-stack-oror-Full-explaination
                3. https://leetcode.com/problems/sum-of-subarray-ranges/discuss/1696344/Java-or-Well-explained-with-examples-or-O(n)
                4. https://leetcode.com/problems/sum-of-subarray-ranges/discuss/1673144/C%2B%2B-Solution-or-O(n2)-to-O(n)-or-Detailed-explanation-with-Walkthrough-of-Tricky-Test-Cases

Video Link: 1. https://youtu.be/y-br2Hee484?t=5521


Solution
APPROACH 1
Time Complexity: O(N * N), where N is the length of string
Space Complexity: O(1)


class Solution {
    public long subArrayRanges(int[] nums) {
        
        int n = nums.length;
        long ans = 0;
        for(int i=0; i<n; i++){
            long min = nums[i];
            long max = nums[i];
            
            for(int j=i; j<n; j++){
                
                min = Math.min(min, nums[j]);
                max = Math.max(max, nums[j]);
                
                ans += (max - min);
            }
        }
        
        return ans;
    }
}
 
 
 
APPROACH 2
Time Complexity: O(N), where N is the length of string
Space Complexity: O(N), where N is the length of string


class Solution {
    
    public void findPrevSmallestNumber(int[] arr, long[] prevSmallestElement){
        int n = arr.length;
        
        Stack<Integer> st1 = new Stack<>();
        for(int i=0; i<n; i++){
           
            while(st1.size() > 0  &&  arr[st1.peek()] >= arr[i]){
                st1.pop();
            }
                
            if(st1.size() == 0){
                prevSmallestElement[i] = i;
            }
            else{
                prevSmallestElement[i] = i - st1.peek() - 1;
            }
            
            st1.push(i);        
        }  
    }
    
    public void findNextSmallestNumber(int[] arr, long[] nextSmallestElement){
        int n = arr.length;
        
        Stack<Integer> st1 = new Stack<>();
        for(int i=n-1; i>=0; i--){
                        
            while(st1.size() > 0  &&  arr[st1.peek()] > arr[i]){
                st1.pop();
            }
                
            if(st1.size() == 0){
                nextSmallestElement[i] = n - 1 - i;
            }
            else{
                nextSmallestElement[i] = st1.peek() - i - 1;
            }
            
            st1.push(i);        
        }  
    }
    
    public void findPrevBiggestNumber(int[] arr, long[] prevBiggestElement){
        int n = arr.length;
        
        Stack<Integer> st1 = new Stack<>();
        for(int i=0; i<n; i++){
           
            while(st1.size() > 0  &&  arr[st1.peek()] <= arr[i]){
                st1.pop();
            }
                
            if(st1.size() == 0){
                prevBiggestElement[i] = i;
            }
            else{
                prevBiggestElement[i] = i - st1.peek() - 1;
            }
            
            st1.push(i);        
        }  
    }
    
    public void findNextBiggestNumber(int[] arr, long[] nextBiggestElement){
        int n = arr.length;
        
        Stack<Integer> st1 = new Stack<>();
        for(int i=n-1; i>=0; i--){
                        
            while(st1.size() > 0  &&  arr[st1.peek()] < arr[i]){
                st1.pop();
            }
                
            if(st1.size() == 0){
                nextBiggestElement[i] = n - 1 - i;
            }
            else{
                nextBiggestElement[i] = st1.peek() - i - 1;
            }
            
            st1.push(i);        
        }  
    }
    
    public long subArrayRanges(int[] arr) {
        
        int n = arr.length;
        
        long[] prevSmallestElement = new long[n];
        findPrevSmallestNumber(arr, prevSmallestElement);
        
        long[] nextSmallestElement = new long[n];
        findNextSmallestNumber(arr, nextSmallestElement);
        
        long[] prevBiggestElement = new long[n];
        findPrevBiggestNumber(arr, prevBiggestElement);
        
        long[] nextBiggestElement = new long[n];
        findNextBiggestNumber(arr, nextBiggestElement);
        
        long ans = 0;
        for(int i=0; i<n; i++){
            
            /*
                sum = sum(max) - sum(min)
                
                sum(max) = (number of subarrays where a[i] is maximum) * a[i]
                sum(min) = (number of subarrays where a[i] is minimum) * a[i]                             
            */

            long current1 = ((prevSmallestElement[i] + 1) * (nextSmallestElement[i] + 1));
            long current2 = ((prevBiggestElement[i] + 1) * (nextBiggestElement[i] + 1));
            
            ans += (arr[i] * (current2 - current1));
        }
        
        return ans;
    }
}

/*  here while finding next/ prev smallest number or next/ prev biggest number, in one we used "equal to" sign and in other we didn't use equality sign. As there will be 
    duplicate elements using equality sign on both places, we will add few subarrays more than once. Also, we can see this through an example.    
*/



APPROACH 3
Time Complexity: O(N), where N is the length of string
Space Complexity: O(N), where N is the length of string


class Solution {
private: 
    
    // finds number of subarrays where the elements are treated as minimum
    long long int sumSubarrayMins(vector<int>& arr) {
        
        int n = arr.size();
        long long ans = 0;
        
        stack<int> st;
        // traversing all the elements. here, when we will traverse all elements, we are iterating the loop again for those elements who haven't got their next 
        // smallest element. So the 'i == n' loop will work for the above said elements
        for(int i=0; i<=n; i++){
            
            // remove all elements that are greater than arr[i] in the stack as we want to maintain increasing order in the stack            
            while(st.empty() == false  &&  (i == n  ||  arr[st.top()] > arr[i])){
                // we will pop the topmost element and find it's right and left subarray where it will be considered as minimum element
                long long int j = st.top();
                st.pop();
                
                // right subarray will be the number of elements between the next smallest element after the popped element. So, difference of both indices will be the 
                // size of right subaaray
                long long int right_subarray = i - j;
                
                // for left subarray, as we have maintained the stack in an increasing order, therefore the next top element will be previous smallest element before the 
                // current popped element. So, difference of both indeices will be the size of left subarray. If stack is empty this means, all the elements before it 
                // are greater than it so we will take all the elements as size of left subarray
                long long int previous_Top = -1;
                if(st.empty() == false){
                    previous_Top = st.top();
                }
                
                long long int left_subarray = j - previous_Top;
                
                // ans = (arr[i] * number of subarrays)
                // number of subarrays = no of left subarrays * no of right subarrays
                ans += ((long long)(arr[j]) * left_subarray * right_subarray);
            }
            
            // pushing the index in the stack
            st.push(i);
        }
                                     
        return ans;
    }
    
    
    // finds number of subarrays where the elements are treated as maximum
    long long int sumSubarrayMaxs(vector<int>& arr) {
        
        int n = arr.size();        
        long long ans = 0;
        
        stack<int> st;
        // traversing all the elements. here, when we will traverse all elements, we are iterating the loop again for those elements who haven't got their next biggest 
        // element. So the 'i == n' loop will work for the above said elements
        for(int i=0; i<=n; i++){
            
            // remove all elements that are smaller than arr[i] in the stack as we want to maintain decreasing order in the stack            
            while(st.empty() == false  &&  (i == n  ||  arr[st.top()] < arr[i])){
                // we will pop the topmost element and find it's right and left subarray where it will be considered as maximum element
                long long int j = st.top();
                st.pop();
                
                // right subarray will be the number of elements between the next biggest element after the popped element. So, difference of both indices will be the 
                // size of right subaaray
                long long int right_subarray = i - j;
                
                // for left subarray, as we have maintained the stack in an decreasing order, therefore the next top element will be previous biggest element before the 
                // current popped element. So, difference of both indeices will be the size of left subarray. If stack is empty this means, all the elements before it are 
                // smaller than it so we will take all the elements as size of left subarray
                long long int previous_Top = -1;
                if(st.empty() == false){
                    previous_Top = st.top();
                }
                
                long long int left_subarray = j - previous_Top;
                
                // ans = (arr[i] * number of subarrays)
                // number of subarrays = no of left subarrays * no of right subarrays
                ans += ((long long)(arr[j]) * left_subarray * right_subarray);
            }
            
            // pushing the index in the stack
            st.push(i);
        }
                                     
        return ans;
    }
    
    
public:
    long long subArrayRanges(vector<int>& nums) {
        
        return sumSubarrayMaxs(nums) - sumSubarrayMins(nums);
    }
};
