Problem Number: 2094
Problem Name: Finding 3-Digit Even Numbers
Link: https://leetcode.com/problems/finding-3-digit-even-numbers/

Question
You are given an integer array digits, where each element is a digit. The array may contain duplicates.
You need to find all the unique integers that follow the given requirements:
  1. The integer consists of the concatenation of three elements from digits in any arbitrary order.
  2. The integer does not have leading zeros.
  3. The integer is even.

For example, if the given digits were [1, 2, 3], integers 132 and 312 follow the requirements.
Return a sorted array of the unique integers.



Solution


Time Complexity: O(N^3), where N is the length of the array
Space Complexity: O(1000) = O(1)


APPROACH 1
class Solution {
public:
    vector<int> findEvenNumbers(vector<int>& digits) {
        
        unordered_set<int> uset;
        
        for(int i=0; i<digits.size(); i++){
            for(int j=0; j<digits.size(); j++){
                for(int k=0; k<digits.size(); k++){
                    if(digits[i] != 0  &&  i!= j  &&  j!=k  &&  i != k){
                        int num = (digits[i] * 100) + (digits[j] * 10) + (digits[k] * 1);
                        if(num % 2 == 0){
                            uset.insert(num);
                        }                        
                    }
                }
            }
        }
                
        vector<int> ans;
        for(auto i : uset){
            ans.push_back(i);
        }
        
        sort(ans.begin(), ans.end());
        
        return ans;
    }
};



Time Complexity: O(1000) = O(1)
Space Complexity: O(1000) = O(1)


APPROACH 2
class Solution {
public:
    vector<int> findEvenNumbers(vector<int>& digits) {
        
        // storing the frequenccy of the digits
        vector<int> count(10, 0);
        for(int i=0; i<digits.size(); i++){
            count[digits[i]]++;
        }
        
        // checking every number whether the number's digits are present in the array or not
        vector<int> ans;
        for(int i=100; i<1000; i += 2){
            vector<int> current(10, 0);
            int temp = i;
            while(temp > 0){
                current[temp%10]++;
                temp /= 10;
            }
            
            // checking the digits. if number 'i' has less digits than the digits present in the array then it cant be the answer
            bool tag = true;
            for(int j=0; j<10; j++){
                if(count[j] < current[j]){
                    tag = false;
                    break;
                }
            }
            
            if(tag == true){
                ans.push_back(i);
            }
        }
        
        return ans;
    }
};
